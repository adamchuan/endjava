var RootPath = '';
var fs = require('fs');
var S = require('string');

module.exports.setRoot = function(p)//检查根目录路径是否最后加'/'
{
	RootPath = p;
	if (!RootPath.match(/\/$/)) RootPath+='/';
};

module.exports.create = function(f)
{
	return new EndSkin(f);
};

exports.cache = {};

function EndSkin(tmpId)
{
	if (!tmpId)
	{
		throw new Error('EndSkin: no template name passed');
		return;
	}
	var codeBlocks = [];

	this.templateReader = function(f,cb)
	{
		var file = RootPath+f;
		var fileMatch = file.match(/views\/(.*?)\w/i);
		file = file.replace(fileMatch[1],'');
		return fs.readFileSync(file,'utf-8');
	} 
	
	this.getTemplateString = function(id)
	{
		var s = this.templateReader(id);
		if (!s)
		{
			throw new Error('EndSkin: template "'+id+'" not found');
			return;
		}
		//TRIP.log(id);
		//TRIP.log(s);
		var ms = s.match(/<%@.*?include.*file=\"(.*?)\".*?%>/gi);
		if (ms){
			 for(var i=0,m;m=ms[i]; i++)
				{
					var _ms = m.match(/<%@.*?include.*file=\"(.*?)\".*?%>/i);
					s = s.replace(m,this.getTemplateString(_ms[1]));
				}
		}

		return s;
	}
	
	this.data = {};
	
	this.assign = function(key,val)
	{
		if (key && val) this.data[key] = val;
		else if (typeof key == 'object')
			for(var k in key)
				this.data[k] = key[k];
		return this;
	}
	
	
	this.compile = function(page)
	{
		var ms = null,i=0,m;
		
		var cSetBegin = 0;
		if (ms = page.match(/\<c\:set.*\>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				var _ms = m.match(/\<c\:set.*?var=\"(.*?)\".*?value=\"(\$\{.*?\}).*?\"\>/i);
				if (_ms)
				{
					var value = _ms[2];
					var variable = '${'+_ms[1]+'}';
//					var code = 'var '+ variable + ' = ' + value + ';';
//					console.log('code~~~~~~~~~~~~~~:'+code);
//					codeBlocks.push(code);
//					var replaceVarName = new RegExp(variable, "g");
//					var replaceVarName = eval(variable);
//					console.log(replaceVarName + '++++++++++' + value);
					page = S(page).replaceAll(variable,value).s;
					console.log(page);
					
//					var replaceVarName = new RegExp(variable, "g");
//					var p;
//					pageReplace = page.match(replaceVarName);
//					for(var j=0; p=pageReplace[j] ; j++){
//						code = value;
//						codeBlocks.push(code);
//						page = page.replace(p,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}'); 
//					}
				
					cSetBegin++;
				}
			}
		}
		
		var cSetEnd = 0;
		if (ms = page.match(/\<\/c\:set.*\>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
//				var code = '\n';
//				codeBlocks.push(code);
//				console.log(codeBlocks);
//				page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
				page = page.replace(m,'');
				cSetEnd++;
			}
		}
		
		var foreachBegins = 0;
		if (ms = page.match(/\<c\:forEach.*\>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
//				console.log("m:" + m);
				var _ms = m.match(/\<c\:forEach.+\$\{(.*)\}.*var=\"(.*)\"\>/i);
				if (_ms)
				{
					var variable = this._replace_var_name_jsp(_ms[1]);
					var item = _ms[2];
					var code = '(function()\n{\nvar __var = '+variable+';\nfor(var __key in __var)\n{\nthis.data[\"'+item+'\"] = __var[__key]; \n';
					codeBlocks.push(code);
//					console.log("code:" + code);
					page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
//					console.log("page:" + page);
					continue;
				}
				foreachBegins++;
			}
		}
		
		var foreachEnds = 0;
		if (ms = page.match(/\<\/c:forEach>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				var code = '}\n}).call(this);\n';
				codeBlocks.push(code);
				page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
				foreachEnds++;
			}
		}
		
		var ifBegins = 0;
		if (ms = page.match(/\<c\:if.*\>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				var _ms = m.match(/\<c\:if.*?test=\"\$\{(.*?)([\>\<\=].*?)\}.*?\>/i);
				if (_ms)
				{
					var variable = this._replace_var_name_jsp(_ms[1]);
					var cond = _ms[2];
										
					var code = 'if ('+ variable + cond+')\n{\n';
					codeBlocks.push(code);
					page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
					ifBegins++;
				}
			}
		}
		
		var ifEnds = 0;
		if (ms = page.match(/\<\/c\:if>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				var code = '}\n';
				codeBlocks.push(code);
				page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
				ifEnds++;
			}
		}
		
		var cwhenBegins = 0;
		if (ms = page.match(/\<c\:when.*\>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				var _ms = m.match(/\<c\:when.*?test=\"\$\{(.*?)([\>\<\=].*?)\}.*?\>/i);
				if (_ms)
				{
					var variable = this._replace_var_name_jsp(_ms[1]);
					var cond = _ms[2];
										
					var code = 'if ('+ variable + cond+')\n{\n';
					codeBlocks.push(code);
					page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
					cwhenBegins++;
				}
			}
		}
		
		var cWhenEnds = 0;
		if (ms = page.match(/\<\/c\:when>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				var code = '}\n';
				codeBlocks.push(code);
				page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
				cWhenEnds++;
			}
		}
		
		var cOthersBegins = 0;
		if (ms = page.match(/\<c\:otherwise\>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				var code = '\nelse\n{\n';
				codeBlocks.push(code);
				page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
				cOthersBegins++;
			}
		}
		
		var cOthersEnd = 0;
		if (ms = page.match(/\<\/c\:otherwise\>/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				var code = '\n}\n';
				codeBlocks.push(code);
//				console.log(codeBlocks);
				page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
				cOthersEnd++;
			}
		}
		
		
		if(ms = page.match(/\<c\:choose>/ig)){
			for(i=0; m=ms[i]; i++){
				page = page.replace(m, '');
			}
		}
		
		if(ms = page.match(/\<\/c\:choose>/ig)){
			for(i=0; m=ms[i]; i++){
				page = page.replace(m, '');
			}
		}
		
		
		if (ms = page.match(/\$\{([a-zA-Z\_][a-zA-Z0-9\_\.\[\]\'\"]*)\}/ig))
		{
			for(i=0; m=ms[i]; i++)
			{
				var _ms = m.match(/\$\{([a-zA-Z\_][a-zA-Z0-9\_\.\[\]\'\"]*)\}/i);
				var code = 'output.push('+this._replace_var_name_jsp(_ms[1])+');';
				codeBlocks.push(code);
				page = page.replace(m,'{{{{EndSkin.codeblock['+(codeBlocks.length-1)+']}}}}');
			}
		}
		
		var arr = page.split(/\{\{\{\{EndSkin\.codeblock\[\d+\]\}\}\}\}/);
		var ms = page.match(/\{\{\{\{EndSkin\.codeblock\[(\d+)\]\}\}\}\}/g);

		var codes = ['var output = [];'];
		for(i=0;i<arr.length-1; i++)
		{
				if(arr[i].replace(/\s+/g,"") != ""){
					codes.push('output.push('+JSON.stringify(arr[i])+');\n');
				}
				var _ms = ms[i].match(/\{\{\{\{EndSkin\.codeblock\[(\d+)\]\}\}\}\}/);
				codes.push(codeBlocks[parseInt(_ms[1])]+'\n');
			
		}
		codes.push('output.push('+JSON.stringify(arr.pop())+');\n');
		codes.push("return output.join('');");
		
//		console.log("codes:" + codes.join(''));

		try
		{
			return new Function(codes.join(''));
		}
		catch(e)
		{
			var err = [];
			if (foreachBegins > foreachEnds) err.push('missing '+(foreachBegins - foreachEnds)+' {/foreach}');
			if (foreachBegins < foreachEnds) err.push('too much {/foreach}');
//			if (cOthersBegins != foreachEnds) err.push('too much {/foreach}');
			if (ifBegins > ifEnds) err.push('missing '+(ifBegins - ifEnds)+' {/if}');
			if (ifBegins < ifEnds) err.push('too much {/if}');
			var re = 'EndSkin Compile Error: \nview file:'+tmpId+'\n'+e.toString() + ';\n' + err.join(';\n');
			throw new Error(re);
			return re;
		}
	}
	
	this._replace_var_name_jsp = function(s)
	{
//		console.log("_replace_var_name_jsp:" + s);
		s = s.replace(/[a-z\_0-9\.]+/ig,function(s)
		{
			return 'this.show_val_jsp(\"' + s + '\")';
		});
		return s;
	}
	
	
	
	this.show_val_jsp = function(s)
	{
		var arr = s.split('.');
		var val = this.data;
		for(var i=0;i<arr.length;i++)
		{
			var key = arr[i];
			if (val[key] == undefined) return '';
			val = val[key];
		}
		if (typeof val == 'function') val = val();
		return val;
	}
	
	this._replace_var_name = function(s)
	{
		s = s.replace(/\$[a-z\_0-9\.]+/ig,function(s)
		{
			return 'this.show_val(\"' + s.replace('$','') + '\")';
		});
		return s;
	}
	
	
	
	this.show_val = function(s)
	{
		var arr = s.split('.');
		var val = this.data;
		for(var i=0;i<arr.length;i++)
		{
			var key = arr[i];
			if (val[key] == undefined) return '';
			val = val[key];
		}
		if (typeof val == 'function') val = val();
		return val;
	}
	
	var s = this.getTemplateString(tmpId);
	console.log(s);
	if (!s) return;
	var cached_func = this.compile(s);
	
	this.html = function()
	{
		if (typeof cached_func == 'function')
			return cached_func.call(this);
		else
			return cached_func.toString();
	};
//	console.log(this.html());
	
	return this;
};



/*
* express 3.x support
*/
exports.renderFile = function(path, options, fn)
{
	var key = path + ':func';

	console.log(path);
	if('function' == typeof options) 
	{
		fn = options, options = {};
	}

	if (options.settings && options.settings.views)
	{
		RootPath = options.settings.views;
	}
	else
	{
		RootPath = path.replace(/\/[^\/]*$/,'/');
	}
	
	var viewsMatch = path.match(/(views.*?)\w/i);
	var tmpId = path.split(viewsMatch[1]).pop();
	try 
	{
		if (options.cache && exports.cache[key])
		{
			exports.cache[key].data = options;
			fn(null,exports.cache[key].html());
		}
		else
		{
			var func = new EndSkin(tmpId);
			exports.cache[key] = func;
			func.assign(options);
			fn(null,func.html());
		}
	}
	catch(err) 
	{
		fn(err);
	}
};


exports.__express = exports.renderFile;
